{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9674b101-0ad6-4745-ad59-e6cfde669286",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "from datetime import datetime\n",
    "\n",
    "class Doktor:\n",
    "    def __init__(self, isim, uzmanlik_alani):\n",
    "        self.isim = isim\n",
    "        self.uzmanlik_alani = uzmanlik_alani\n",
    "        self.musaitlik_durumu = True  # Doktorlar başlangıçta müsait durumda\n",
    "\n",
    "class RandevuSistemi:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Randevu Sistemi\")\n",
    "        self.root.geometry(\"550x550\")\n",
    "        self.root.configure(background=\"#E0E0E0\")  # Arka plan rengi\n",
    "\n",
    "        self.kullanici_adi = \"\"\n",
    "        self.kullanici_tc = \"\"\n",
    "\n",
    "        self.setup_giris_ui()\n",
    "\n",
    "    def setup_giris_ui(self):\n",
    "        self.isim_label = ttk.Label(self.root, text=\"İsim:\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.isim_label.pack(anchor=\"w\", padx=20, pady=(50, 10))\n",
    "\n",
    "        self.isim_entry = ttk.Entry(self.root, width=40)\n",
    "        self.isim_entry.pack(anchor=\"w\", padx=20)\n",
    "\n",
    "        self.tc_label = ttk.Label(self.root, text=\"TC Kimlik No:\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.tc_label.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.tc_entry = ttk.Entry(self.root, width=40)\n",
    "        self.tc_entry.pack(anchor=\"w\", padx=20)\n",
    "\n",
    "        self.giris_button = ttk.Button(self.root, text=\"Giriş Yap\", command=self.giris_yap, style=\"Accent.TButton\")\n",
    "        self.giris_button.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.kullanici_bilgisi_label = ttk.Label(self.root, text=\"\", background=\"#E0E0E0\", font=(\"Helvetica\", 12), foreground=\"#000080\")\n",
    "        self.kullanici_bilgisi_label.pack(anchor=\"nw\", padx=20, pady=10)\n",
    "\n",
    "    def giris_yap(self):\n",
    "        isim = self.isim_entry.get()\n",
    "        tc = self.tc_entry.get()\n",
    "\n",
    "        # TC kimlik numarası doğrulaması\n",
    "        if len(tc) != 11 or tc.startswith('0'):\n",
    "            messagebox.showerror(\"Hata\", \"Geçersiz TC Kimlik No!\")\n",
    "            return\n",
    "\n",
    "        self.kullanici_adi = isim\n",
    "        self.kullanici_tc = tc\n",
    "\n",
    "        self.isim_entry.destroy()\n",
    "        self.tc_label.destroy()\n",
    "        self.tc_entry.destroy()\n",
    "        self.giris_button.destroy()\n",
    "\n",
    "        self.kullanici_bilgisi_label.config(text=f\"Kullanıcı: {isim} ({tc})\")\n",
    "\n",
    "        self.setup_randevu_ui()\n",
    "\n",
    "    def setup_randevu_ui(self):\n",
    "        # Randevu Tarihi\n",
    "        self.tarih_label = ttk.Label(self.root, text=\"Randevu Tarihi (GG.AA.YYYY):\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.tarih_label.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.tarih_entry = ttk.Entry(self.root, width=40)\n",
    "        self.tarih_entry.pack(anchor=\"w\", padx=20)\n",
    "\n",
    "        # Doktorlar oluşturuluyor\n",
    "        self.doktorlar = [\n",
    "            Doktor(\"Dr. Hüseyin Ahmet Can\", \"Dahiliye\"),\n",
    "            Doktor(\"Dr. Ayşe Taşçı\", \"Nöroloji\"),\n",
    "            Doktor(\"Dr. Dağhan Yıldız\", \"Kardiyoloji\")\n",
    "        ]\n",
    "\n",
    "        # Doktor seçimi için Combobox oluşturuluyor\n",
    "        self.doktor_label = ttk.Label(self.root, text=\"Doktor Seçin:\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.doktor_label.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.doktor_combobox = ttk.Combobox(self.root, values=[f\"{doktor.isim} - {doktor.uzmanlik_alani}\" for doktor in self.doktorlar], width=50)\n",
    "        self.doktor_combobox.pack(anchor=\"w\", padx=20)\n",
    "\n",
    "        # Doktorların müsaitlik durumu göstermek için etiketler oluşturuluyor\n",
    "        self.musaitlik_label = ttk.Label(self.root, text=\"Doktorların Müsaitlik Durumu:\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.musaitlik_label.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.musaitlik_etiketler = []\n",
    "        for i, doktor in enumerate(self.doktorlar):\n",
    "            musaitlik_etiket = ttk.Label(self.root, text=f\"{doktor.isim}: {'Müsait' if doktor.musaitlik_durumu else 'Müsait Değil'}\", background=\"#E0E0E0\", font=(\"Helvetica\", 15), foreground=\"#000080\")  \n",
    "            musaitlik_etiket.pack(anchor=\"w\", padx=20)\n",
    "            self.musaitlik_etiketler.append(musaitlik_etiket)\n",
    "\n",
    "        # Butonlar\n",
    "        self.randevu_al_button = ttk.Button(self.root, text=\"Randevu Al\", command=self.randevu_al, style=\"Accent.TButton\")\n",
    "        self.randevu_al_button.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        self.randevu_iptal_button = ttk.Button(self.root, text=\"Randevu İptal\", command=self.randevu_iptal, style=\"Accent.TButton\")\n",
    "        self.randevu_iptal_button.pack(anchor=\"w\", padx=20, pady=10)\n",
    "\n",
    "        # Başarıyla oluşturulan randevuları göstermek için bir alan oluşturuluyor\n",
    "        self.randevu_bilgisi_frame = ttk.Frame(self.root, style=\"Info.TFrame\")\n",
    "        self.randevu_bilgisi_frame.pack(anchor=\"ne\", padx=20, pady=20)\n",
    "\n",
    "        self.randevu_bilgisi_label = ttk.Label(self.randevu_bilgisi_frame, text=\"Başarıyla Oluşturulan Randevular:\", background=\"#E0E0E0\", font=(\"Helvetica\", 20), foreground=\"#000080\")  \n",
    "        self.randevu_bilgisi_label.pack(anchor=\"nw\", padx=10, pady=10)\n",
    "\n",
    "        self.randevu_bilgisi_listbox = tk.Listbox(self.randevu_bilgisi_frame, width=60, height=10)\n",
    "        self.randevu_bilgisi_listbox.pack(anchor=\"nw\", padx=10, pady=5)\n",
    "\n",
    "    def tarih_gecerli_mi(self, tarih_str):\n",
    "        try:\n",
    "            tarih = datetime.strptime(tarih_str, \"%d.%m.%Y\")\n",
    "            return tarih >= datetime.now()\n",
    "        except ValueError:\n",
    "            return False\n",
    "\n",
    "    def randevu_al(self):\n",
    "        secili_doktor_secimi = self.doktor_combobox.get()\n",
    "        secili_tarih = self.tarih_entry.get()\n",
    "\n",
    "        # Tarih geçerlilik kontrolü\n",
    "        if not self.tarih_gecerli_mi(secili_tarih):\n",
    "            messagebox.showerror(\"Hata\", \"Geçersiz tarih!\")\n",
    "            return\n",
    "\n",
    "        # Seçilen doktoru bul\n",
    "        secili_doktor_adi, secili_uzmanlik_alani = secili_doktor_secimi.split(\" - \")\n",
    "        secili_doktor = None\n",
    "        for doktor in self.doktorlar:\n",
    "            if doktor.isim == secili_doktor_adi and doktor.uzmanlik_alani == secili_uzmanlik_alani:\n",
    "                secili_doktor = doktor\n",
    "                break\n",
    "\n",
    "        if secili_doktor is None:\n",
    "            messagebox.showerror(\"Hata\", \"Geçersiz doktor seçimi!\")\n",
    "            return\n",
    "\n",
    "        # Müsaitlik kontrolü\n",
    "        if not secili_doktor.musaitlik_durumu:\n",
    "            messagebox.showerror(\"Hata\", \"Seçilen doktor şu anda müsait değil.\")\n",
    "            return\n",
    "\n",
    "        # Randevu alındığında doktorun müsaitlik durumunu güncelle\n",
    "        secili_doktor.musaitlik_durumu = False\n",
    "\n",
    "        # Randevu bilgilerini listbox'a ekle\n",
    "        randevu_bilgisi = f\"Doktor: {secili_doktor_adi} - {secili_uzmanlik_alani}, İsim: {self.kullanici_adi}, TC: {self.kullanici_tc}, Tarih: {secili_tarih}\"\n",
    "        self.randevu_bilgisi_listbox.insert(tk.END, randevu_bilgisi)\n",
    "\n",
    "        # Doktorun müsaitlik durumunu güncelle\n",
    "        self.guncelle_musaitlik_etiketi(secili_doktor_adi, False)\n",
    "\n",
    "        # Bildirim göster\n",
    "        messagebox.showinfo(\"Bilgi\", \"Randevu başarıyla oluşturuldu. Sağlıklı günler dileriz.\\n\" + randevu_bilgisi)\n",
    "\n",
    "    def randevu_iptal(self):\n",
    "        secili_index = self.randevu_bilgisi_listbox.curselection()\n",
    "        if not secili_index:\n",
    "            messagebox.showerror(\"Hata\", \"Lütfen iptal etmek istediğiniz randevuyu seçin.\")\n",
    "            return\n",
    "\n",
    "        secili_index = secili_index[0]\n",
    "        secili_randevu = self.randevu_bilgisi_listbox.get(secili_index)\n",
    "        self.randevu_bilgisi_listbox.delete(secili_index)\n",
    "        self.randevu_bilgisi_listbox.insert(secili_index, secili_randevu + \" - İptal Edildi\")\n",
    "        messagebox.showinfo(\"Bilgi\", \"Randevu başarıyla iptal edildi.\")\n",
    "\n",
    "        # Doktorun müsaitlik durumunu güncelle\n",
    "        secili_doktor_adi = secili_randevu.split(\",\")[0].split(\":\")[1].strip().split(\" - \")[0]\n",
    "        self.guncelle_musaitlik_etiketi(secili_doktor_adi, True)\n",
    "\n",
    "    def guncelle_musaitlik_etiketi(self, doktor_adi, durum):\n",
    "        for etiket in self.musaitlik_etiketler:\n",
    "            if doktor_adi in etiket.cget(\"text\"):\n",
    "                etiket.config(text=f\"{doktor_adi}: {'Müsait' if durum else 'Müsait Değil'}\")\n",
    "                break\n",
    "\n",
    "def main():\n",
    "    root = tk.Tk()\n",
    "    randevu_sistemi = RandevuSistemi(root)\n",
    "    root.mainloop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da78384e-83f6-4394-85c3-5ecddc21a0a1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
